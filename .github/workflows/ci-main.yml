name: SAM.PSModule Build

on:
  push:
    branches:
      - main
    tags:
      - "*"
  release:
    types:
      - published
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

jobs:
  build:
    name: Module Build
    runs-on: ubuntu-latest
    steps:

      - name: Get Debug Status
        id: debugStatus
        run: |
          echo '::set-output name=runnerDebug::${{secrets.ACTIONS_RUNNER_DEBUG}}'
          echo '::set-output name=stepDebug::${{secrets.ACTIONS_STEP_DEBUG}}'

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Dependencies
        shell: pwsh
        run: |
          dotnet tool install --global GitVersion.Tool
          .\build.ps1 -InstallDependencies

      - name: Set Environment Variables
        id: SetEnvVariables
        shell: pwsh
        run: |
          .\build.ps1 -Task SetEnvironment

      - if: steps.debugStatus.outputs.stepDebug
        name: Environment Information
        shell: pwsh
        run: |
          "::group::Powershell Modules"
          ($ENV:PSModulePath).split([io.path]::pathseparator) | where {Test-Path $_} | Get-ChildItem
          "::endgroup"

          "::group::Variables"
          Get-Variable | select name,value | Out-String
          "::endgroup"

          "::group::Environment"
          dir env: | Out-String
          "::endgroup"

      - name: Build Module
        id: build
        shell: pwsh
        run: |
          .\build.ps1 -Task Build

      - name: Update Module Manifest PreRelease
        if: github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          .\build.ps1 -Task SetPreReleaseFlag

      - name: Capture Powershell Module
        uses: actions/upload-artifact@v2
        with:
          name: PSModule
          path: ${{ steps.SetEnvVariables.outputs.prjModulePath }}



  deployPrerelease:
    name: Deploy PreRelease Module
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - build
    steps:
      - name: Restore Built Powershell Module
        uses: actions/download-artifact@v2
        with:
          name: PSModule
          path: BuildOutput/${{ github.event.repository.name }}

      #- name: Publish Module to PowerShell Gallery
      #  shell: pwsh
      #  run: |
      #    if (-not '${{ secrets.PS_GALLERY_KEY }}') {throw 'You need to configure a PS_GALLERY_KEY secret for this environment with your Powershell Gallery API Key'}
      #    Publish-Module -Verbose -Name $PWD/BuildOutput/${{ github.event.repository.name }} -NugetApiKey ${{ secrets.PS_GALLERY_KEY }}

  deploy:
    name: Deploy Module
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - build
    steps:
      - name: Restore Built Powershell Module
        uses: actions/download-artifact@v2
        with:
          name: PSModule
          path: BuildOutput/${{ github.event.repository.name }}

      #- name: Publish Module to PowerShell Gallery
      #  shell: pwsh
      #  run: |
      #    if (-not '${{ secrets.PS_GALLERY_KEY }}') {throw 'You need to configure a PS_GALLERY_KEY secret for this environment with your Powershell Gallery API Key'}
      #    Publish-Module -Verbose -Name $PWD/BuildOutput/${{ github.event.repository.name }} -NugetApiKey ${{ secrets.PS_GALLERY_KEY }}
